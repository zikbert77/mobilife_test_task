{##
 # This file is part of the SgDatatablesBundle package.
 #
 # (c) stwe <https://github.com/stwe/DatatablesBundle>
 #
 # For the full copyright and license information, please view the LICENSE
 # file that was distributed with this source code.
 #}
{% set token = csrf_token('sg-datatables-editable') %}

$(".{{ column_class_editable_selector|raw }}").editable({
    url: '{{ path(editable_options.url)|raw }}',
    params: function (params) {
        params.entityClassName = '{{ entity_class_name }}';
        params.token = '{{ token }}';
        params.originalTypeOfField = '{{ original_type_of_field }}';
        params.path = $(this).editable().data('path');

        {% if editable_options.params is not same as(null) %}
            {% for key, param in editable_options.params %}
                params.{{ key }} = '{{ param }}';
            {% endfor %}
        {% endif %}

        return params;
    },
    {% if editable_options.defaultValue is not same as(null) %}
    defaultValue: '{{ editable_options.defaultValue }}',
    {% endif %}
    emptyclass: '{{ editable_options.emptyClass|raw }}',
    emptytext: '{{ editable_options.emptyText|raw }}',
    highlight: '{{ editable_options.highlight|raw }}',
    mode: '{{ editable_options.mode }}',
    {% if editable_options.name is not same as(null) %}
    name: '{{ editable_options.name }}',
    {% else %}
    name: '{{ column_dql }}',
    {% endif %}
    type: '{{ editable_options.type }}',
    {% if editable_options.source is defined %}
    source: {{ editable_options.source|raw }},
    {% endif %}
    {% if editable_options.clear is defined %}
    clear: {{ editable_options.clear|sg_datatables_bool_var }},
    {% endif %}
    {% if editable_options.placeholder is defined and editable_options.placeholder is not same as(null) %}
    placeholder: '{{ editable_options.placeholder|raw }}',
    {% endif %}
    {% if editable_options.rows is defined %}
    rows: {{ editable_options.rows }},
    {% endif %}
    {% if editable_options.format is defined %}
    format: '{{ editable_options.format }}',
    {% endif %}
    {% if editable_options.viewFormat is defined and editable_options.viewFormat is not same as(null) %}
    viewformat: '{{ editable_options.viewFormat }}',
    {% endif %}

    {% if 'combodate' == editable_options.type %}
        combodate: {
            minYear: {{ editable_options.minYear }},
            maxYear: {{ editable_options.maxYear }},
            minuteStep: {{ editable_options.minuteStep }},
            secondStep: {{ editable_options.secondStep }},
            smartDays: {{ editable_options.smartDays|sg_datatables_bool_var }},
        },
    {% endif %}

    success: function() {
        if (pipeline > 0) {
            oTable.clearPipeline().draw();
        } else {
            oTable.draw();
        }
    }
});
